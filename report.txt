I finish this draft of the project after 4-day hastily hard working, in order to revise the final exam of other lecture. This is a big lesson learned.
It is not required to use SQL procedure which I am not quite familiar with, So I use SQL sentences as core logic which are all written in java file.
Although my project may contain many drawbacks, anyway, I have learned many things based on my skills.
1. When preparing the SQL statement, I would never forget that lack of semicolon at the end of the SQL statement lead to another HotFix to deliver a few years ago. However, when I use PreparedStatement, CallableStatement or Statement to construct the SQL, I encounter an exception saying "invalid character". After trying several times, I found the semicolon MUST not be there in the SQL statement.
2. After that, I tried to change the cursor of a resultSet to just before the first element when the resultSet satisfied the support value. I failed when using the method ResultSet.beforelist(). After thinking several time, I use HashMap to store the result set of the statement and succeed.
3. A good lesson learned is that I spent almost 3/4 of the time to fully understand what the association rule is after checking the tutorials in section 6.3. I falsely thought the size 2 of the rule is just the sum of size 1 referring to the example of section 2.2 and queried why we do not just sum them, but fortunately, I checked the references on website.
4. In task 3, a new exception occurs: ORA-01000: maximum open cursors exceeded. I found that there is one result set that being used throughout the whole loop. Then I transfer the result set to the HashMap.
5. When using the HashMap created from 4 above, I found it is very inconvenient to traverse it. So I want to create another java file that contains the resultSet as a structure. This is unsupportable when I am seeing the grading script that only allow arm.java file. Finally, I create inner class to store this structure.
6. Now after that, I am thinking about how to get the amount of transactions who contains all candidate frequent items and also the subSet amount for frequent candidate items. The solution is, however, using nested SQL a bit more levels.
7. I decide to insert FISet after the big loop, because when inserting FISet during the while loop. The result may be wrong as the FISet is changing...
8. In task 4, I found a problem that the results are duplicated several time. This is because there are prety much permutation of glued FIs for a satisfied result. After checking the F&Q on web, I decide to use java structure to store a result pool to do the duplicated check, which can save much time to calculate.
9. To calculate the confidence in task 4, I need all the combination of permutations, after checking the Q&A, I use divide and conquer in java to handle with it.
Thank you!